// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppLogic.Migrations
{
    [DbContext(typeof(LoggAppContext))]
    partial class LoggAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessLogic.Models.Activity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DayCards");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.CaffeineDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedMgCaffeine")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.Property<string>("TypeOfDrink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("CaffeineDrinks");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedKcal")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedProteinInGrams")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.SupplementIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DosageInMg")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PercentageOfDRI")
                        .HasColumnType("int");

                    b.Property<int?>("SupplementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementIngredients");
                });

            modelBuilder.Entity("BusinessLogic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessLogic.Models.Weather.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AQI")
                        .HasColumnType("int");

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<double?>("Lat")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "lat");

                    b.Property<double?>("Lon")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "lon");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.Property<int?>("UVI")
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "units");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Exercise", b =>
                {
                    b.HasBaseType("BusinessLogic.Models.Activity.Activity");

                    b.Property<int?>("ActiveKcalBurned")
                        .HasColumnType("int");

                    b.Property<int?>("AvgHeartRate")
                        .HasColumnType("int");

                    b.Property<int?>("AvgKmTempo")
                        .HasColumnType("int");

                    b.Property<int?>("AvgStepLength")
                        .HasColumnType("int");

                    b.Property<int?>("AvgStepPerMin")
                        .HasColumnType("int");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseType")
                        .HasColumnType("int");

                    b.Property<int?>("Intensity")
                        .HasColumnType("int");

                    b.Property<int?>("PerceivedIntensity")
                        .HasColumnType("int");

                    b.Property<int?>("Steps")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingLoad")
                        .HasColumnType("int");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Activity", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("Activities")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.HasOne("BusinessLogic.Models.User", "User")
                        .WithMany("DayCards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.CaffeineDrink", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("CaffeineDrinks")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Food", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany()
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Medication", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany()
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("Supplements")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.SupplementIngredient", b =>
                {
                    b.HasOne("BusinessLogic.Models.Intake.Supplement", "Supplement")
                        .WithMany("Ingredients")
                        .HasForeignKey("SupplementId");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("BusinessLogic.Models.Weather.WeatherData", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("WeatherData")
                        .HasForeignKey("DayCardId");

                    b.OwnsOne("BusinessLogic.Models.Weather.CloudCoverBlock", "CloudCover", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<int?>("Afternoon")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "afternoon");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "cloud_cover");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.OwnsOne("BusinessLogic.Models.Weather.HumidityBlock", "Humidity", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<int?>("Afternoon")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "afternoon");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "humidity");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.OwnsOne("BusinessLogic.Models.Weather.PrecipitationBlock", "Precipitation", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Total")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "total");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "precipitation");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.OwnsOne("BusinessLogic.Models.Weather.PressureBlock", "Pressure", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<int?>("Afternoon")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "afternoon");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "pressure");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.OwnsOne("BusinessLogic.Models.Weather.TemperatureBlock", "Temperature", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<double?>("Afternoon")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "afternoon");

                            b1.Property<double?>("Evening")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "evening");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Max")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "max");

                            b1.Property<double?>("Min")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "min");

                            b1.Property<double?>("Morning")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "morning");

                            b1.Property<double?>("Night")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "night");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "temperature");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.Navigation("CloudCover");

                    b.Navigation("DayCard");

                    b.Navigation("Humidity");

                    b.Navigation("Precipitation");

                    b.Navigation("Pressure");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Exercise", b =>
                {
                    b.HasOne("BusinessLogic.Models.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("BusinessLogic.Models.Activity.Exercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CaffeineDrinks");

                    b.Navigation("Supplements");

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("BusinessLogic.Models.User", b =>
                {
                    b.Navigation("DayCards");
                });
#pragma warning restore 612, 618
        }
    }
}
