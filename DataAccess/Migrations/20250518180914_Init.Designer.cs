// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppLogic.Migrations
{
    [DbContext(typeof(LoggAppContext))]
    [Migration("20250518180914_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppLogic.Models.Weather.AirQuality.AirQualityData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<double>("GenerationTime_ms")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "generationtime_ms");

                    b.Property<double?>("Lat")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double?>("Lon")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId")
                        .IsUnique()
                        .HasFilter("[DayCardId] IS NOT NULL");

                    b.ToTable("AirQualities");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DayCards");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.CaffeineDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedMgCaffeine")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.Property<string>("TypeOfDrink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("CaffeineDrinks");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedKcal")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedProteinInGrams")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.SupplementIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DosageInMg")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PercentageOfDRI")
                        .HasColumnType("int");

                    b.Property<int?>("SupplementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementIngredients");
                });

            modelBuilder.Entity("BusinessLogic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessLogic.Models.Weather.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayCardId")
                        .HasColumnType("int");

                    b.Property<double?>("GenerationTimeMs")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "generationtime_ms");

                    b.Property<double?>("Lat")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double?>("Lon")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<TimeOnly?>("TimeOf")
                        .HasColumnType("time");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "timezone");

                    b.Property<string>("TimezoneAbbreviation")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "timezone_abbreviation");

                    b.Property<int?>("UtcOffsetSeconds")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "utc_offset_seconds");

                    b.HasKey("Id");

                    b.HasIndex("DayCardId")
                        .IsUnique()
                        .HasFilter("[DayCardId] IS NOT NULL");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Exercise", b =>
                {
                    b.HasBaseType("BusinessLogic.Models.Activity.Activity");

                    b.Property<int?>("ActiveKcalBurned")
                        .HasColumnType("int");

                    b.Property<int?>("AvgHeartRate")
                        .HasColumnType("int");

                    b.Property<int?>("AvgKmTempo")
                        .HasColumnType("int");

                    b.Property<int?>("AvgStepLength")
                        .HasColumnType("int");

                    b.Property<int?>("AvgStepPerMin")
                        .HasColumnType("int");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseType")
                        .HasColumnType("int");

                    b.Property<int?>("Intensity")
                        .HasColumnType("int");

                    b.Property<int?>("PerceivedIntensity")
                        .HasColumnType("int");

                    b.Property<int?>("Steps")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingLoad")
                        .HasColumnType("int");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("AppLogic.Models.Weather.AirQuality.AirQualityData", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithOne("AirQualityData")
                        .HasForeignKey("AppLogic.Models.Weather.AirQuality.AirQualityData", "DayCardId");

                    b.OwnsOne("AppLogic.Models.Weather.AirQuality.AirQualityHourlyBlock", "HourlyBlock", b1 =>
                        {
                            b1.Property<int>("AirQualityDataId")
                                .HasColumnType("int");

                            b1.Property<string>("AQI")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "european_aqi");

                            b1.Property<string>("AlderPollen")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "alder_pollen");

                            b1.Property<string>("BirchPollen")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "birch_pollen");

                            b1.Property<string>("CarbonMonoxide")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "carbon_monoxide");

                            b1.Property<string>("Dust")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "dust");

                            b1.Property<string>("GrassPollen")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "grass_pollen");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MugwortPollen")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "mugwort_pollen");

                            b1.Property<string>("NitrogenDioxide")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "nitrogen_dioxide");

                            b1.Property<string>("Ozone")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "ozone");

                            b1.Property<string>("PM25")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "pm2_5");

                            b1.Property<string>("RagweedPollen")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "ragweed_pollen");

                            b1.Property<string>("Time")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "time");

                            b1.Property<string>("UVI")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "uv_index");

                            b1.HasKey("AirQualityDataId");

                            b1.ToTable("AirQualities");

                            b1.HasAnnotation("Relational:JsonPropertyName", "hourly");

                            b1.WithOwner()
                                .HasForeignKey("AirQualityDataId");
                        });

                    b.Navigation("DayCard");

                    b.Navigation("HourlyBlock");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Activity", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("Activities")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.HasOne("BusinessLogic.Models.User", "User")
                        .WithMany("DayCards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.CaffeineDrink", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("CaffeineDrinks")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Food", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany()
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Medication", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany()
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithMany("Supplements")
                        .HasForeignKey("DayCardId");

                    b.Navigation("DayCard");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.SupplementIngredient", b =>
                {
                    b.HasOne("BusinessLogic.Models.Intake.Supplement", "Supplement")
                        .WithMany("Ingredients")
                        .HasForeignKey("SupplementId");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("BusinessLogic.Models.Weather.WeatherData", b =>
                {
                    b.HasOne("BusinessLogic.Models.DayCard", "DayCard")
                        .WithOne("WeatherData")
                        .HasForeignKey("BusinessLogic.Models.Weather.WeatherData", "DayCardId");

                    b.OwnsOne("AppLogic.Models.Weather.WeatherDataHourlyBlock", "HourlyBlock", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<string>("ApparentTemperature")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "apparent_temperature");

                            b1.Property<string>("CloudCover")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "cloud_cover");

                            b1.Property<string>("DewPoint2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "dew_point_2m");

                            b1.Property<string>("IsDay")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "is_day");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Precipitation")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "precipitation");

                            b1.Property<string>("PressureMsl")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "pressure_msl");

                            b1.Property<string>("Rain")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "rain");

                            b1.Property<string>("RelativeHumidity2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "relative_humidity_2m");

                            b1.Property<string>("Temperature2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "temperature_2m");

                            b1.Property<string>("Time")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "time");

                            b1.Property<string>("UvIndex")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "uv_index");

                            b1.Property<string>("WindSpeed10m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "wind_speed_10m");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "hourly");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.OwnsOne("AppLogic.Models.Weather.WeatherDataHourlyUnits", "HourlyUnits", b1 =>
                        {
                            b1.Property<int>("WeatherDataId")
                                .HasColumnType("int");

                            b1.Property<string>("ApparentTemperature")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "apparent_temperature");

                            b1.Property<string>("CloudCover")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "cloud_cover");

                            b1.Property<string>("DewPoint2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "dew_point_2m");

                            b1.Property<string>("IsDay")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "is_day");

                            b1.Property<string>("Marker")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Precipitation")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "precipitation");

                            b1.Property<string>("PressureMsl")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "pressure_msl");

                            b1.Property<string>("Rain")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "rain");

                            b1.Property<string>("RelativeHumidity2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "relative_humidity_2m");

                            b1.Property<string>("Temperature2m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "temperature_2m");

                            b1.Property<string>("UvIndex")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "uv_index");

                            b1.Property<string>("WindSpeed10m")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "wind_speed_10m");

                            b1.HasKey("WeatherDataId");

                            b1.ToTable("WeatherData");

                            b1.HasAnnotation("Relational:JsonPropertyName", "hourly_units");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataId");
                        });

                    b.Navigation("DayCard");

                    b.Navigation("HourlyBlock");

                    b.Navigation("HourlyUnits");
                });

            modelBuilder.Entity("BusinessLogic.Models.Activity.Exercise", b =>
                {
                    b.HasOne("BusinessLogic.Models.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("BusinessLogic.Models.Activity.Exercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Models.DayCard", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AirQualityData");

                    b.Navigation("CaffeineDrinks");

                    b.Navigation("Supplements");

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("BusinessLogic.Models.Intake.Supplement", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("BusinessLogic.Models.User", b =>
                {
                    b.Navigation("DayCards");
                });
#pragma warning restore 612, 618
        }
    }
}
